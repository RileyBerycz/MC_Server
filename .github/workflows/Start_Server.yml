name: Launch Minecraft Server

on:
  workflow_dispatch:
    inputs:
      memory:
        description: 'Memory allocation for Java (e.g. 1024M, 2G)'
        default: '1024M'
        required: false
      backup_interval:
        description: 'Backup interval in hours'
        default: '6'
        required: false
      max_runtime:
        description: 'Maximum runtime in minutes before restart'
        default: '359'
        required: false
  schedule:
    - cron: '0 */6 * * *'  # Run every 6 hours
      
jobs:
  start-minecraft-server:
    runs-on: ubuntu-latest
    timeout-minutes: 360  # GitHub's 6 hour limit
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: '17'
          
      - name: Verify Java installation
        run: java -version
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyngrok zipfile36 datetime

      - name: Check for previous backups
        id: check_backups
        run: |
          if curl -s -o /dev/null -w "%{http_code}" https://api.github.com/repos/${{ github.repository }}/actions/artifacts?name=minecraft-backup | grep -q "200"; then
            echo "BACKUP_EXISTS=true" >> $GITHUB_OUTPUT
          else
            echo "BACKUP_EXISTS=false" >> $GITHUB_OUTPUT
            echo "No previous backups found. Starting with a fresh world."
          fi

      - name: Download previous world backup if exists
        if: steps.check_backups.outputs.BACKUP_EXISTS == 'true'
        uses: actions/download-artifact@v4
        with:
          name: minecraft-backup
          path: .
        continue-on-error: true
        
      - name: Extract backup if exists
        run: |
          if ls backup_*.zip 1> /dev/null 2>&1; then
            echo "Found backup file. Extracting..."
            latest_backup=$(ls -t backup_*.zip | head -1)
            unzip -o "$latest_backup"
            echo "Backup extracted successfully."
          else
            echo "No backup file found. Starting with fresh world."
          fi

      - name: Download Minecraft Server if needed
        run: |
          if [ ! -f "server.jar" ]; then
            echo "Downloading Paper server jar..."
            # Using Paper - a more reliable server implementation
            curl -o server.jar https://api.papermc.io/v2/projects/paper/versions/1.19.4/builds/550/downloads/paper-1.19.4-550.jar
          fi
          
      - name: Accept EULA
        run: |
          echo "eula=true" > eula.txt
          
      - name: Launch Minecraft Server
        id: launch_server
        run: |
          # Try to launch server, but continue workflow even if it fails
          python Start_Server.py || echo "Server failed to start or closed unexpectedly"
        env:
          JAVA_ARGS: "-Xmx${{ github.event.inputs.memory || '1024M' }} -Xms${{ github.event.inputs.memory || '1024M' }}"
          NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
          MINECRAFT_JAR: "server.jar"
          MINECRAFT_PORT: "25565"
          BACKUP_INTERVAL_HOURS: "${{ github.event.inputs.backup_interval || '6' }}"
          MAX_RUNTIME_MINUTES: "${{ github.event.inputs.max_runtime || '340' }}"
          
      - name: Run fallback if server fails
        run: |
          # Create a fallback backup in case the server failed
          echo "Creating fallback backup..."
          mkdir -p world
          touch world/placeholder.txt
          # Ensure we have a backup even if server didn't run
          if [ ! -f backup_*.zip ]; then
            zip -r backup_fallback_$(date +%Y%m%d_%H%M%S).zip world server.properties 2>/dev/null || true
            echo "Created fallback backup."
          fi
          
          # Keep runner alive for a bit to ensure GitHub doesn't terminate early
          echo "Sleeping for 5 minutes to ensure workflow completes..."
          sleep 300
          
      - name: Upload world backup
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: minecraft-backup
          path: backup_*.zip
          retention-days: 1
          
      - name: Keep runner alive if server crashes
        if: always()
        run: |
          # Sleep for a bit to ensure backup completes
          echo "Ensuring final backup completes..."
          sleep 30
          
      - name: Schedule next run
        if: ${{ !github.event.schedule }}
        run: |
          echo "Setting up scheduled restart..."
          # Adding a comment to server.properties to track restart time
          echo "# Last restart: $(date)" >> server.properties