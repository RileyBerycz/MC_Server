name: Launch Minecraft Server

on:
  workflow_dispatch:
    inputs:
      memory:
        description: 'Memory allocation for Java (e.g. 1024M, 2G)'
        default: '1024M'
        required: false
      backup_interval:
        description: 'Backup interval in hours'
        default: '6'
        required: false
      max_runtime:
        description: 'Maximum runtime in minutes before restart'
        default: '359'
        required: false
  schedule:
    - cron: '0 */6 * * *'  # Run every 6 hours
      
jobs:
  start-minecraft-server:
    runs-on: ubuntu-latest
    timeout-minutes: 360  # GitHub's 6 hour limit
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Set up Java 23
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'  # The closest to Oracle's JDK
          java-version: '23'       # Use Java 23 instead of 17
          
      - name: Verify Java installation
        run: |
          java -version
          echo "JAVA_HOME=$JAVA_HOME"
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flask pyngrok requests werkzeug

      - name: Try to download previous world backup
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: minecraft-backup
          path: .
          
      - name: Ensure backup environment
        run: |
          mkdir -p world
          if [ ! -f "server.properties" ]; then
            echo "level-name=world" > server.properties
          fi

      - name: Extract backup if exists
        run: |
          if ls backup_*.zip 1> /dev/null 2>&1; then
            echo "Found backup file. Extracting..."
            latest_backup=$(ls -t backup_*.zip | head -1)
            unzip -o "$latest_backup" || echo "Failed to extract backup, continuing with new world"
            echo "Backup extracted successfully."
          else
            echo "No backup file found. Starting with fresh world."
          fi

      - name: Download Minecraft Server if needed
        run: |
          if [ ! -f "server.jar" ]; then
            echo "Downloading Minecraft server jar..."
            # Try a vanilla server jar instead
            curl -o server.jar https://piston-data.mojang.com/v1/objects/8f3112a1049751cc472ec13e397eade5336ca7ae/server.jar
          fi
          
      - name: Accept EULA
        run: |
          echo "eula=true" > eula.txt
          
      - name: Test Java can run the server JAR
        run: |
          echo "Testing Java compatibility with server JAR..."
          java -Xms128M -Xmx128M -jar server.jar --help || echo "Initial JAR test failed, but continuing"
          
      - name: Launch Minecraft Server
        id: launch_server
        run: |
          # Try to launch server with error handling
          python Start_Server.py || echo "Server failed to start or closed unexpectedly"
        env:
          JAVA_ARGS: "-Xmx${{ github.event.inputs.memory || '1024M' }} -Xms${{ github.event.inputs.memory || '1024M' }} --enable-preview"
          NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
          MINECRAFT_JAR: "server.jar"
          MINECRAFT_PORT: "25565"
          BACKUP_INTERVAL_HOURS: "${{ github.event.inputs.backup_interval || '6' }}"
          MAX_RUNTIME_MINUTES: "${{ github.event.inputs.max_runtime || '340' }}"
          
      - name: Run extended fallback if server fails
        run: |
          echo "Creating extended fallback process..."
          
          # Create some dummy world data to ensure backup works
          mkdir -p world/region
          echo "This is a placeholder file" > world/placeholder.txt
          
          # Create a fallback backup
          zip -r backup_fallback_$(date +%Y%m%d_%H%M%S).zip world server.properties 2>/dev/null || true
          
          # Start a long-running process to keep the GitHub Action alive
          # This script will output periodic messages and run for 5 hours
          echo '#!/bin/bash
          echo "Starting fallback keep-alive process..."
          start_time=$(date +%s)
          end_time=$((start_time + 18000))  # 5 hours
          
          while [ $(date +%s) -lt $end_time ]; do
            current=$(date +%s)
            elapsed=$((current - start_time))
            remaining=$((end_time - current))
            echo "[$(date)] Fallback process running. Elapsed: $(($elapsed/60))m, Remaining: $(($remaining/60))m"
            # Create periodic backups
            if [ $(($elapsed % 3600)) -lt 60 ]; then
              echo "Creating hourly backup..."
              zip -r backup_hourly_$(date +%Y%m%d_%H%M%S).zip world server.properties 2>/dev/null || true
            fi
            sleep 600  # Print status every 10 minutes
          done
          ' > keepalive.sh
          chmod +x keepalive.sh
          ./keepalive.sh
          
      - name: Upload world backup
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: minecraft-backup
          path: backup_*.zip
          retention-days: 1
          
      - name: Keep runner alive if server crashes
        if: always()
        run: |
          # Sleep for a bit to ensure backup completes
          echo "Ensuring final backup completes..."
          sleep 30
          
      - name: Schedule next run
        if: ${{ !github.event.schedule }}
        run: |
          echo "Setting up scheduled restart..."
          # Adding a comment to server.properties to track restart time
          echo "# Last restart: $(date)" >> server.properties