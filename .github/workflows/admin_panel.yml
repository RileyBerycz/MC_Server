name: Minecraft Admin Panel

on:
  workflow_dispatch:
    inputs:
      timeout:
        description: 'Admin panel timeout in minutes'
        default: '60'
        required: false
      port:
        description: 'Admin panel port'
        default: '8080'
        required: false

jobs:
  run-admin-panel:
    runs-on: ubuntu-latest
    timeout-minutes: 60  # Use a fixed value here
    
    steps:
      - name: Set timeout
        run: echo "Using timeout of ${{ github.event.inputs.timeout || 60 }} minutes"
        
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flask pyngrok requests werkzeug jinja2 pymdown-extensions markdown
          
      - name: Download latest backups
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: minecraft-backup
          path: ./backups
          
      - name: Setup directories
        run: |
          mkdir -p admin_panel/static/css || true
          mkdir -p admin_panel/templates || true
          mkdir -p backups || true
          mkdir -p server_configs || true
          mkdir -p server_templates/vanilla || true
          mkdir -p server_templates/paper || true
          mkdir -p server_templates/forge || true
          mkdir -p server_templates/fabric || true
          mkdir -p server_templates/bedrock || true
          mkdir -p uploads || true
          
      - name: Copy dashboard template
        run: |
          # First check if dashboard file exists in either location
          if [ -f "admin_panel/dashboard" ]; then
            cp admin_panel/dashboard admin_panel/templates/dashboard.html
          elif [ -f "admin_panel/dashboard.html" ]; then
            cp admin_panel/dashboard.html admin_panel/templates/dashboard.html
          else
            # Create a basic dashboard if not found
            echo "<!-- Basic Dashboard Template -->" > admin_panel/templates/dashboard.html
            echo '<h1>Minecraft Server Admin</h1><p>Setup your server configuration to begin.</p>' >> admin_panel/templates/dashboard.html
          fi
          
      - name: Install cloudflared
        run: |
          curl -L --output cloudflared.deb https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
          sudo dpkg -i cloudflared.deb

      - name: Launch admin panel
        run: |
          echo "Starting Minecraft Admin Panel..."
          
          # Create a basic CSS file if it doesn't exist
          if [ ! -f "admin_panel/static/css/style.css" ]; then
            echo "/* Minecraft Admin Panel CSS */" > admin_panel/static/css/style.css
            echo "body { font-family: Arial, sans-serif; }" >> admin_panel/static/css/style.css
          fi
          
          # Run the admin panel (Flask will keep running until terminated)
          python admin_panel.py
        env:
          ADMIN_PORT: ${{ github.event.inputs.port || '8080' }}
          NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.WORKFLOW_PAT }}
          SECRET_KEY: ${{ secrets.ADMIN_SECRET_KEY || 'minecraft-default-secret' }}
          ADMIN_TIMEOUT_MINUTES: ${{ github.event.inputs.timeout || '60' }}
          
      - name: Start admin panel tunnel
        run: |
          cloudflared tunnel --url http://localhost:8080 > admin_tunnel.log 2>&1 &
          echo "Admin panel tunnel starting..."

      - name: Debug Cloudflared output
        run: |
          cloudflared tunnel --url http://localhost:8080 > tunnel.log 2>&1 &
          sleep 10
          cat tunnel.log

      - name: Start game server tunnels (for each server)
        run: |
          # For each Minecraft server port (e.g., 25565, 25566)
          cloudflared tunnel --url tcp://localhost:25565 > game_tunnel1.log 2>&1 &
          cloudflared tunnel --url tcp://localhost:25566 > game_tunnel2.log 2>&1 &
          echo "Game server tunnels starting..."

      - name: Extract tunnel URLs
        run: |
          sleep 5  # Give tunnels time to establish
          grep -o 'https://.*\.trycloudflare.com' admin_tunnel.log || echo "Admin tunnel not found"
          grep -o 'tcp://.*\.trycloudflare.com' game_tunnel1.log || echo "Game tunnel 1 not found"
          grep -o 'tcp://.*\.trycloudflare.com' game_tunnel2.log || echo "Game tunnel 2 not found"

      - name: Start Admin Panel with tmate
        uses: mxschmitt/action-tmate@v3
        with:
          limit-access-to-actor: true