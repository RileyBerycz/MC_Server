name: Vanilla Minecraft Server

on:
  workflow_dispatch:
    inputs:
      server_id:
        description: 'Server ID'
        required: true

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install cloudflared
        run: |
          curl -L --output cloudflared.deb https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
          sudo dpkg -i cloudflared.deb

      - name: Set up cloudflared cert
        run: |
          mkdir -p ~/.cloudflared
          echo "${{ secrets.CLOUDFLARED_CERT }}" > ~/.cloudflared/cert.pem
          echo "TUNNEL_ORIGIN_CERT=$HOME/.cloudflared/cert.pem" >> $GITHUB_ENV

      - name: Export Cloudflare tunnel creds
        run: |
          echo 'CLOUDFLARE_TUNNELS_CREDS<<EOF' >> $GITHUB_ENV
          echo "${{ secrets.CLOUDFLARE_TUNNELS_CREDS }}" >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: Prepare server directory
        run: mkdir -p servers/${{ inputs.server_id }}

      - name: Download server jar if missing
        run: |
          cd servers/${{ inputs.server_id }}
          if [ ! -f server.jar ]; then
            curl -o server.jar "https://piston-data.mojang.com/v1/objects/8dd1a28015f51b1803213892b50b7b4fc76e594d/server.jar"
          fi

      - name: Accept EULA
        run: echo "eula=true" > servers/${{ inputs.server_id }}/eula.txt

      - name: Initialize server (generate files only)
        run: |
          if [ -d servers/${{ inputs.server_id }} ] && [ "$(ls -A servers/${{ inputs.server_id }})" ]; then
            echo "Server folder already exists and is not empty, skipping initialization."
            exit 0
          fi
          python3 -u server_helper.py ${{ inputs.server_id }} vanilla true

      - name: Commit generated files
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add servers/${{ inputs.server_id }}
          git commit -m "Update server files for ${{ inputs.server_id }}" || echo "No changes"
          git pull --rebase --autostash
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Start server and tunnel
        run: |
          python3 -u server_helper.py ${{ inputs.server_id }} vanilla

      - name: Commit world and server data
        if: always()
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add servers/${{ inputs.server_id }}
          git commit -m "Save world and server data for ${{ inputs.server_id }}" || echo "No changes"
          git pull --rebase --autostash
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}